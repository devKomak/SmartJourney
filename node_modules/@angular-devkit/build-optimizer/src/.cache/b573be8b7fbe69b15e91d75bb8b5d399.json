{"remainingRequest":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\angularfire2\\firestore\\firestore.js","dependencies":[{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\angularfire2\\firestore\\firestore.js","mtime":1525919944761},{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1525919945814},{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525919940101}],"contextDependencies":[],"result":["import { InjectionToken, NgZone, PLATFORM_ID } from '@angular/core';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport { Injectable, Inject, Optional } from '@angular/core';\nimport { AngularFirestoreDocument } from './document/document';\nimport { AngularFirestoreCollection } from './collection/collection';\nimport { FirebaseAppConfig, FirebaseAppName, _firebaseAppFactory, FirebaseZoneScheduler } from 'angularfire2';\nexport var EnablePersistenceToken = new InjectionToken('angularfire2.enableFirestorePersistence');\nexport function associateQuery(collectionRef, queryFn) {\n    if (queryFn === void 0) {\n        queryFn = function (ref) { return ref; };\n    }\n    var query = queryFn(collectionRef);\n    var ref = collectionRef;\n    return { query: query, ref: ref };\n}\nvar AngularFirestore = /*@__PURE__*/ (function () {\n    function AngularFirestore(config, name, shouldEnablePersistence, platformId, zone) {\n        var _this = this;\n        this.scheduler = new FirebaseZoneScheduler(zone, platformId);\n        this.firestore = zone.runOutsideAngular(function () {\n            var app = _firebaseAppFactory(config, name);\n            return app.firestore();\n        });\n        this.persistenceEnabled$ = zone.runOutsideAngular(function () {\n            return shouldEnablePersistence ? from(_this.firestore.enablePersistence().then(function () { return true; }, function () { return false; }))\n                : of(false);\n        })\n            .catch(function () { return of(false); });\n    }\n    AngularFirestore.prototype.collection = function (pathOrRef, queryFn) {\n        var collectionRef;\n        if (typeof pathOrRef === 'string') {\n            collectionRef = this.firestore.collection(pathOrRef);\n        }\n        else {\n            collectionRef = pathOrRef;\n        }\n        var _a = associateQuery(collectionRef, queryFn), ref = _a.ref, query = _a.query;\n        return new AngularFirestoreCollection(ref, query, this);\n    };\n    AngularFirestore.prototype.doc = function (pathOrRef) {\n        var ref;\n        if (typeof pathOrRef === 'string') {\n            ref = this.firestore.doc(pathOrRef);\n        }\n        else {\n            ref = pathOrRef;\n        }\n        return new AngularFirestoreDocument(ref, this);\n    };\n    AngularFirestore.prototype.createId = function () {\n        return this.firestore.collection('_').doc().id;\n    };\n    return AngularFirestore;\n}());\nexport { AngularFirestore };\n//# sourceMappingURL=firestore.js.map \n",null]}