{"remainingRequest":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\@agm\\snazzy-info-window\\directives\\snazzy-info-window.js","dependencies":[{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\@agm\\snazzy-info-window\\directives\\snazzy-info-window.js","mtime":1524516573025},{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524516580611},{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524516573656}],"contextDependencies":[],"result":["import { Host, SkipSelf, EventEmitter, Input, ViewContainerRef, TemplateRef, Output, Optional, ElementRef, Component, ViewChild, ContentChild } from '@angular/core';\nimport { AgmMarker, GoogleMapsAPIWrapper, MarkerManager, MapsAPILoader } from '@agm/core';\nvar AgmSnazzyInfoWindow = /*@__PURE__*/ (function () {\n    function AgmSnazzyInfoWindow(_marker, _wrapper, _manager, _loader) {\n        this._marker = _marker;\n        this._wrapper = _wrapper;\n        this._manager = _manager;\n        this._loader = _loader;\n        /**\n         * Changes the open status of the snazzy info window.\n         */\n        this.isOpen = false;\n        /**\n         * Emits when the open status changes.\n         */\n        this.isOpenChange = new EventEmitter();\n        /**\n         * Choose where you want the info window to be displayed, relative to the marker.\n         */\n        this.placement = 'top';\n        /**\n         * The max width in pixels of the info window.\n         */\n        this.maxWidth = 200;\n        /**\n         * The max height in pixels of the info window.\n         */\n        this.maxHeight = 200;\n        /**\n         * Determines if the info window will open when the marker is clicked.\n         * An internal listener is added to the Google Maps click event which calls the open() method.\n         */\n        this.openOnMarkerClick = true;\n        /**\n         * Determines if the info window will close when the map is clicked. An internal listener is added to the Google Maps click event which calls the close() method.\n         * This will not activate on the Google Maps drag event when the user is panning the map.\n         */\n        this.closeOnMapClick = true;\n        /**\n         * Determines if the info window will close when any other Snazzy Info Window is opened.\n         */\n        this.closeWhenOthersOpen = false;\n        /**\n         * Determines if the info window will show a close button.\n         */\n        this.showCloseButton = true;\n        /**\n         * Determines if the info window will be panned into view when opened.\n         */\n        this.panOnOpen = true;\n        /**\n         * Emits before the info window opens.\n         */\n        this.beforeOpen = new EventEmitter();\n        /**\n         * Emits before the info window closes.\n         */\n        this.afterClose = new EventEmitter();\n        this._snazzyInfoWindowInitialized = null;\n    }\n    /**\n     * @internal\n     */\n    AgmSnazzyInfoWindow.prototype.ngOnChanges = function (changes) {\n        if (this._nativeSnazzyInfoWindow == null) {\n            return;\n        }\n        if ('isOpen' in changes && this.isOpen) {\n            this._openInfoWindow();\n        }\n        else if ('isOpen' in changes && !this.isOpen) {\n            this._closeInfoWindow();\n        }\n        if (('latitude' in changes || 'longitude' in changes) && this._marker == null) {\n            this._updatePosition();\n        }\n    };\n    /**\n     * @internal\n     */\n    AgmSnazzyInfoWindow.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var m = this._manager != null ? this._manager.getNativeMarker(this._marker) : null;\n        this._snazzyInfoWindowInitialized = this._loader.load()\n            .then(function () { return System.import('snazzy-info-window'); })\n            .then(function (module) { return Promise.all([module, m, _this._wrapper.getNativeMap()]); })\n            .then(function (elems) {\n            var options = {\n                map: elems[2],\n                content: '',\n                placement: _this.placement,\n                maxWidth: _this.maxWidth,\n                maxHeight: _this.maxHeight,\n                backgroundColor: _this.backgroundColor,\n                padding: _this.padding,\n                border: _this.border,\n                borderRadius: _this.borderRadius,\n                fontColor: _this.fontColor,\n                pointer: _this.pointer,\n                shadow: _this.shadow,\n                closeOnMapClick: _this.closeOnMapClick,\n                openOnMarkerClick: _this.openOnMarkerClick,\n                closeWhenOthersOpen: _this.closeWhenOthersOpen,\n                showCloseButton: _this.showCloseButton,\n                panOnOpen: _this.panOnOpen,\n                wrapperClass: _this.wrapperClass,\n                callbacks: {\n                    beforeOpen: function () {\n                        _this._createViewContent();\n                        _this.beforeOpen.emit();\n                    },\n                    afterOpen: function () {\n                        _this.isOpenChange.emit(_this.openStatus());\n                    },\n                    afterClose: function () {\n                        _this.afterClose.emit();\n                        _this.isOpenChange.emit(_this.openStatus());\n                    }\n                }\n            };\n            if (elems[1] != null) {\n                options.marker = elems[1];\n            }\n            else {\n                options.position = {\n                    lat: _this.latitude,\n                    lng: _this.longitude\n                };\n            }\n            _this._nativeSnazzyInfoWindow = new elems[0](options);\n        });\n        this._snazzyInfoWindowInitialized.then(function () {\n            if (_this.isOpen) {\n                _this._openInfoWindow();\n            }\n        });\n    };\n    AgmSnazzyInfoWindow.prototype._openInfoWindow = function () {\n        var _this = this;\n        this._snazzyInfoWindowInitialized.then(function () {\n            _this._createViewContent();\n            _this._nativeSnazzyInfoWindow.open();\n        });\n    };\n    AgmSnazzyInfoWindow.prototype._closeInfoWindow = function () {\n        var _this = this;\n        this._snazzyInfoWindowInitialized.then(function () {\n            _this._nativeSnazzyInfoWindow.close();\n        });\n    };\n    AgmSnazzyInfoWindow.prototype._createViewContent = function () {\n        if (this._viewContainerRef.length === 1) {\n            return;\n        }\n        var evr = this._viewContainerRef.createEmbeddedView(this._templateRef);\n        this._nativeSnazzyInfoWindow.setContent(this._outerWrapper.nativeElement);\n        // we have to run this in a separate cycle.\n        setTimeout(function () {\n            evr.detectChanges();\n        });\n    };\n    AgmSnazzyInfoWindow.prototype._updatePosition = function () {\n        this._nativeSnazzyInfoWindow.setPosition({\n            lat: this.latitude,\n            lng: this.longitude\n        });\n    };\n    /**\n     * Returns true when the Snazzy Info Window is initialized and open.\n     */\n    AgmSnazzyInfoWindow.prototype.openStatus = function () {\n        return this._nativeSnazzyInfoWindow && this._nativeSnazzyInfoWindow.isOpen();\n    };\n    /**\n     * @internal\n     */\n    AgmSnazzyInfoWindow.prototype.ngOnDestroy = function () {\n        if (this._nativeSnazzyInfoWindow) {\n            this._nativeSnazzyInfoWindow.destroy();\n        }\n    };\n    return AgmSnazzyInfoWindow;\n}());\nexport { AgmSnazzyInfoWindow };\n//# sourceMappingURL=snazzy-info-window.js.map \n",null]}