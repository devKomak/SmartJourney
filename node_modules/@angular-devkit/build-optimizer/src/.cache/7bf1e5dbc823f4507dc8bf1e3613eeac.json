{"remainingRequest":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\angularfire2\\database\\list\\audit-trail.js","dependencies":[{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\angularfire2\\database\\list\\audit-trail.js","mtime":1524401693453},{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524401694898},{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\SmartJourney\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524401688360}],"contextDependencies":[],"result":["import { stateChanges } from './state-changes';\r\nimport { fromRef } from '../observable/fromRef';\r\nimport 'rxjs/add/operator/skipWhile';\r\nimport 'rxjs/add/operator/withLatestFrom';\r\nimport 'rxjs/add/operator/map';\r\nexport function createAuditTrail(query) {\r\n    return function (events) { return auditTrail(query, events); };\r\n}\r\nexport function auditTrail(query, events) {\r\n    var auditTrail$ = stateChanges(query, events)\r\n        .scan(function (current, action) { return current.concat([action]); }, []);\r\n    return waitForLoaded(query, auditTrail$);\r\n}\r\nfunction loadedData(query) {\r\n    return fromRef(query, 'value')\r\n        .map(function (data) {\r\n        var lastKeyToLoad;\r\n        data.payload.forEach(function (child) {\r\n            lastKeyToLoad = child.key;\r\n            return false;\r\n        });\r\n        return { data: data, lastKeyToLoad: lastKeyToLoad };\r\n    });\r\n}\r\nfunction waitForLoaded(query, action$) {\r\n    var loaded$ = loadedData(query);\r\n    return loaded$\r\n        .withLatestFrom(action$)\r\n        .map(function (_a) {\r\n        var loaded = _a[0], actions = _a[1];\r\n        var lastKeyToLoad = loaded.lastKeyToLoad;\r\n        var loadedKeys = actions.map(function (snap) { return snap.key; });\r\n        return { actions: actions, lastKeyToLoad: lastKeyToLoad, loadedKeys: loadedKeys };\r\n    })\r\n        .skipWhile(function (meta) { return meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1; })\r\n        .map(function (meta) { return meta.actions; });\r\n}\r\n//# sourceMappingURL=audit-trail.js.map",null]}