{"remainingRequest":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\snap.js","dependencies":[{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\snap\\snap.js","mtime":1525686736975},{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1525686739382},{"path":"C:\\Users\\Jacek\\Desktop\\SmartJourney\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1525686733597}],"contextDependencies":[],"result":["\"use strict\";\r\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"@firebase/util\");\r\nvar util_2 = require(\"../util/util\");\r\nvar util_3 = require(\"@firebase/util\");\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\nexports.setMaxNode = setMaxNode;\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nexports.priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + util_2.doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nexports.validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util_1.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util_3.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util_1.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util_1.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\r\n\r\n//# sourceMappingURL=snap.js.map\r\n",null]}