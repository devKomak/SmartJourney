import { Directive, Input, NgModule } from '@angular/core';
import { GoogleMapsAPIWrapper } from '@agm/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AgmDirection = (function () {
    function AgmDirection(gmapsApi) {
        this.gmapsApi = gmapsApi;
        this.waypoints = [];
        this.travelMode = 'DRIVING';
        this.optimizeWaypoints = true;
        this.visible = true;
        this.drivingOptions = undefined;
        this.transitOptions = undefined;
        this.directionsService = undefined;
        this.directionsDisplay = undefined;
    }
    /**
     * @return {?}
     */
    AgmDirection.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.directionDraw();
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AgmDirection.prototype.ngOnChanges = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /**
             * When visible is false then remove the direction layer
             */
        if (!this.visible) {
            this.directionsDisplay.setPanel(null);
            this.directionsDisplay.setMap(null);
            this.directionsDisplay = undefined;
        }
        else {
            /**
                   * When renderOptions are not first change then reset the display
                   */
            if (obj.renderOptions) {
                if (obj.renderOptions.firstChange === false) {
                    this.directionsDisplay.setPanel(null);
                    this.directionsDisplay.setMap(null);
                    this.directionsDisplay = undefined;
                }
            }
            this.directionDraw();
        }
    };
    /**
     * This event is fired when the user creating or updating this direction
     * @return {?}
     */
    AgmDirection.prototype.directionDraw = /**
     * This event is fired when the user creating or updating this direction
     * @return {?}
     */
    function () {
        var _this = this;
        this.gmapsApi.getNativeMap().then(function (map) {
            if (typeof _this.directionsDisplay === 'undefined') {
                _this.directionsDisplay = new google.maps.DirectionsRenderer(_this.renderOptions);
                _this.directionsDisplay.setMap(map);
            }
            if (typeof _this.directionsService === 'undefined') {
                _this.directionsService = new google.maps.DirectionsService;
            }
            if (typeof _this.panel === 'undefined') {
                _this.directionsDisplay.setPanel(null);
            }
            else {
                _this.directionsDisplay.setPanel(_this.panel);
            }
            _this.directionsService.route({
                origin: _this.origin,
                destination: _this.destination,
                waypoints: _this.waypoints,
                optimizeWaypoints: _this.optimizeWaypoints,
                travelMode: _this.travelMode,
                drivingOptions: _this.drivingOptions,
                transitOptions: _this.transitOptions,
            }, function (response, status) {
                if (status === 'OK') {
                    _this.directionsDisplay.setDirections(response);
                }
            });
        });
    };
    AgmDirection.decorators = [
        { type: Directive, args: [{
                    selector: 'agm-direction'
                },] },
    ];
    /** @nocollapse */
    AgmDirection.ctorParameters = function () { return [
        { type: GoogleMapsAPIWrapper, },
    ]; };
    AgmDirection.propDecorators = {
        "origin": [{ type: Input },],
        "destination": [{ type: Input },],
        "waypoints": [{ type: Input },],
        "travelMode": [{ type: Input },],
        "optimizeWaypoints": [{ type: Input },],
        "visible": [{ type: Input },],
        "renderOptions": [{ type: Input },],
        "drivingOptions": [{ type: Input },],
        "transitOptions": [{ type: Input },],
        "panel": [{ type: Input },],
    };
    return AgmDirection;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AgmDirectionModule = (function () {
    function AgmDirectionModule() {
    }
    /**
     * @return {?}
     */
    AgmDirectionModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AgmDirectionModule,
        };
    };
    AgmDirectionModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        AgmDirection,
                    ],
                    exports: [
                        AgmDirection,
                    ]
                },] },
    ];
    /** @nocollapse */
    AgmDirectionModule.ctorParameters = function () { return []; };
    return AgmDirectionModule;
}());

export { AgmDirectionModule, AgmDirection };
